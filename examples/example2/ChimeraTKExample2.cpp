/*----- PROTECTED REGION ID(ChimeraTKExample2.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        ChimeraTKExample2.cpp
//
// description : C++ source for the ChimeraTKExample2 class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               ChimeraTKExample2 are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include "ChimeraTKExample2.h"
#include "ChimeraTKExample2Class.h"


#include <TangoAdapter.h>

#include "MyApplication.h"
static ExampleApp theExampleApp;
/*----- PROTECTED REGION END -----*/	//	ChimeraTKExample2.cpp

/**
 *  ChimeraTKExample2 class description:
 *    Test of TangoAdapterfor ChimeraTK
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//================================================================

namespace ChimeraTKExample2_ns
{
/*----- PROTECTED REGION ID(ChimeraTKExample2::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	ChimeraTKExample2::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : ChimeraTKExample2::ChimeraTKExample2()
 *	Description : Constructors for a Tango device
 *                implementing the classChimeraTKExample2
 */
//--------------------------------------------------------
ChimeraTKExample2::ChimeraTKExample2(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(ChimeraTKExample2::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	ChimeraTKExample2::constructor_1
}
//--------------------------------------------------------
ChimeraTKExample2::ChimeraTKExample2(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(ChimeraTKExample2::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	ChimeraTKExample2::constructor_2
}
//--------------------------------------------------------
ChimeraTKExample2::ChimeraTKExample2(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(ChimeraTKExample2::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	ChimeraTKExample2::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : ChimeraTKExample2::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void ChimeraTKExample2::delete_device()
{
	DEBUG_STREAM << "ChimeraTKExample2::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(ChimeraTKExample2::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	delete adapter;
	//delete theExampleApp;
	/*----- PROTECTED REGION END -----*/	//	ChimeraTKExample2::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : ChimeraTKExample2::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void ChimeraTKExample2::init_device()
{
	DEBUG_STREAM << "ChimeraTKExample2::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(ChimeraTKExample2::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	ChimeraTKExample2::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	/*----- PROTECTED REGION ID(ChimeraTKExample2::init_device) ENABLED START -----*/
	
	//	Initialize device
    //set DMapFilePath from property
    if (!dMapFilePath.empty())
    {
        ChimeraTK::setDMapFilePath(dMapFilePath);
    }


	adapter = new ChimeraTK::TangoAdapter(this, attributList);


	/*----- PROTECTED REGION END -----*/	//	ChimeraTKExample2::init_device
}

//--------------------------------------------------------
/**
 *	Method      : ChimeraTKExample2::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void ChimeraTKExample2::get_device_property()
{
	/*----- PROTECTED REGION ID(ChimeraTKExample2::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	ChimeraTKExample2::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("AttributList"));
	dev_prop.push_back(Tango::DbDatum("DMapFilePath"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on ChimeraTKExample2Class to get class property
		Tango::DbDatum	def_prop, cl_prop;
		ChimeraTKExample2Class	*ds_class =
			(static_cast<ChimeraTKExample2Class *>(get_device_class()));
		int	i = -1;

		//	Try to initialize AttributList from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  attributList;
		else {
			//	Try to initialize AttributList from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  attributList;
		}
		//	And try to extract AttributList value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  attributList;

		//	Try to initialize DMapFilePath from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  dMapFilePath;
		else {
			//	Try to initialize DMapFilePath from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  dMapFilePath;
		}
		//	And try to extract DMapFilePath value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  dMapFilePath;

	}

	/*----- PROTECTED REGION ID(ChimeraTKExample2::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	ChimeraTKExample2::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : ChimeraTKExample2::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void ChimeraTKExample2::always_executed_hook()
{
	DEBUG_STREAM << "ChimeraTKExample2::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(ChimeraTKExample2::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	ChimeraTKExample2::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : ChimeraTKExample2::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void ChimeraTKExample2::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "ChimeraTKExample2::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(ChimeraTKExample2::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ChimeraTKExample2::read_attr_hardware
}


//--------------------------------------------------------
/**
 *	Method      : ChimeraTKExample2::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void ChimeraTKExample2::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(ChimeraTKExample2::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	ChimeraTKExample2::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : ChimeraTKExample2::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void ChimeraTKExample2::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(ChimeraTKExample2::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	ChimeraTKExample2::add_dynamic_commands
}

/*----- PROTECTED REGION ID(ChimeraTKExample2::namespace_ending) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	ChimeraTKExample2::namespace_ending
} //	namespace
